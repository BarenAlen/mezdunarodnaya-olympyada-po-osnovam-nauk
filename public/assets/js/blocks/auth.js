var highlight, showMessage, showModalBlock;

showModalBlock = function(modalBlock) {
  var modal;
  if (modalBlock && modalBlock.length > 0) {
    modal = modalBlock.modal({
      stopPropagation: modalBlock.find('.auth')
    });
    return modal.show();
  }
};

highlight = function(element) {
  $(element).parent().addClass('input-invalid');
  return $(element).on('focus click', function() {
    return $(this).parent().removeClass('input-invalid');
  });
};

showMessage = function(element, text) {
  var msgBlock;
  msgBlock = element.find('.msg');
  msgBlock.find('p').html(text);
  msgBlock.slideDown();
  return setTimeout(function() {
    return msgBlock.slideUp();
  }, 7000);
};

$(function() {
  var ajaxPath, checkFormFields, forms, hash, modalBlocks;
  modalBlocks = {
    auth: $('.js-auth_modal_form'),
    forgot: $('.js-forgot_password_modal_form')
  };
  modalBlocks.auth.find('.js-forgot_password').on('click', function(e) {
    e.preventDefault();
    return showModalBlock(modalBlocks.forgot);
  });
  hash = window.location.hash;
  if (hash === '#authorize') {
    showModalBlock(modalBlocks.auth);
  }
  $('.js-auth_link').on('click', function(e) {
    e.preventDefault();
    if (Foundation.MediaQuery.current !== 'small') {
      window.location.hash = '#authorize';
      return showModalBlock(modalBlocks.auth);
    } else {
      return window.location.replace($(this).attr('href'));
    }
  });
  checkFormFields = function(field) {
    var label;
    label = field.prev('label');
    if (field.val()) {
      if (label.is(':visible')) {
        return label.hide();
      }
    } else if (label.not(':visible')) {
      return label.show();
    }
  };
  $('.auth__form input').on('keyup change', function() {
    return checkFormFields($(this));
  });
  $(window).on('load', function() {
    return $.each($('.auth__form input'), function(key, field) {
      return setTimeout(function() {
        return checkFormFields($(field));
      }, 200);
    });
  });
  ajaxPath = '/ajax/auth.php?action=';
  forms = $('.auth__form form');
  $.each(forms, function(key, form) {
    return form.noValidate = true;
  });
  return forms.on('submit', function(e) {
    var form, formType, preloader;
    e.preventDefault();
    form = $(this);
    preloader = $(this).parent().preloader();
    preloader.show();
    formType = $(this).data('form-type');
    return $.getJSON(ajaxPath + formType, $(this).serializeArray(), function(result) {
      var bannerElement, customErrors, error, errorCode, field, menuElement, ref;
      preloader.hide();
      if (result) {
        if (result.status === 'Y') {
          if (result.additional && result.additional.hasOwnProperty('header_menu')) {
            menuElement = $('.js-ajax_public_menu');
            bannerElement = $('.js-ajax_banner_menu');
            if (menuElement && menuElement.length > 0) {
              menuElement.html(result.additional.header_menu);
            }
            if (bannerElement && bannerElement.length > 0) {
              bannerElement.html(result.additional.banner_menu);
            }
          }
          form[0].reset();
          return modalBlocks[formType].modal().hide();
        } else if (result.errors) {
          customErrors = [];
          ref = result.errors;
          for (errorCode in ref) {
            error = ref[errorCode];
            if (errorCode === 'EMPTY') {
              field = form.find('[name="' + error + '"]');
              if (field) {
                highlight(field[0]);
              }
            } else {
              customErrors.push(error);
            }
          }
          if (customErrors && customErrors.length > 0) {
            return showMessage(form.parent(), customErrors.join('<br/>'));
          }
        }
      }
    });
  });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2tzL2F1dGguanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzIjpbImJsb2Nrcy9hdXRoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLGNBQUEsR0FBaUIsU0FBQyxVQUFEO0FBQ2YsTUFBQTtFQUFBLElBQUcsVUFBQSxJQUFlLFVBQVUsQ0FBQyxNQUFYLEdBQW9CLENBQXRDO0lBQ0UsS0FBQSxHQUFRLFVBQVUsQ0FBQyxLQUFYLENBQWlCO01BQ3ZCLGVBQUEsRUFBaUIsVUFBVSxDQUFDLElBQVgsQ0FBZ0IsT0FBaEIsQ0FETTtLQUFqQjtXQUdSLEtBQUssQ0FBQyxJQUFOLENBQUEsRUFKRjs7QUFEZTs7QUFPakIsU0FBQSxHQUFZLFNBQUMsT0FBRDtFQUNWLENBQUEsQ0FBRSxPQUFGLENBQVUsQ0FBQyxNQUFYLENBQUEsQ0FBbUIsQ0FBQyxRQUFwQixDQUE2QixlQUE3QjtTQUNBLENBQUEsQ0FBRSxPQUFGLENBQVUsQ0FBQyxFQUFYLENBQWMsYUFBZCxFQUE2QixTQUFBO1dBQzNCLENBQUEsQ0FBRSxJQUFGLENBQU8sQ0FBQyxNQUFSLENBQUEsQ0FBZ0IsQ0FBQyxXQUFqQixDQUE2QixlQUE3QjtFQUQyQixDQUE3QjtBQUZVOztBQUtaLFdBQUEsR0FBYyxTQUFDLE9BQUQsRUFBVSxJQUFWO0FBQ1osTUFBQTtFQUFBLFFBQUEsR0FBVyxPQUFPLENBQUMsSUFBUixDQUFhLE1BQWI7RUFFWCxRQUFRLENBQUMsSUFBVCxDQUFjLEdBQWQsQ0FBa0IsQ0FBQyxJQUFuQixDQUF3QixJQUF4QjtFQUVBLFFBQVEsQ0FBQyxTQUFULENBQUE7U0FFQSxVQUFBLENBQVcsU0FBQTtXQUNULFFBQVEsQ0FBQyxPQUFULENBQUE7RUFEUyxDQUFYLEVBRUUsSUFGRjtBQVBZOztBQVdkLENBQUEsQ0FBRSxTQUFBO0FBQ0EsTUFBQTtFQUFBLFdBQUEsR0FBYztJQUNaLElBQUEsRUFBTSxDQUFBLENBQUUscUJBQUYsQ0FETTtJ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O0lBSHVELENBQXpEO0VBVmlCLENBQW5CO0FBeERBLENBQUYiLCJzb3VyY2VzQ29udGVudCI6WyJzaG93TW9kYWxCbG9jayA9IChtb2RhbEJsb2NrKSAtPlxyXG4gIGlmIG1vZGFsQmxvY2sgYW5kIG1vZGFsQmxvY2subGVuZ3RoID4gMFxyXG4gICAgbW9kYWwgPSBtb2RhbEJsb2NrLm1vZGFsKHtcclxuICAgICAgc3RvcFByb3BhZ2F0aW9uOiBtb2RhbEJsb2NrLmZpbmQoJy5hdXRoJylcclxuICAgIH0pXHJcbiAgICBtb2RhbC5zaG93KClcclxuXHJcbmhpZ2hsaWdodCA9IChlbGVtZW50KSAtPlxyXG4gICQoZWxlbWVudCkucGFyZW50KCkuYWRkQ2xhc3MoJ2lucHV0LWludmFsaWQnKVxyXG4gICQoZWxlbWVudCkub24gJ2ZvY3VzIGNsaWNrJywgKCkgLT5cclxuICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2lucHV0LWludmFsaWQnKVxyXG5cclxuc2hvd01lc3NhZ2UgPSAoZWxlbWVudCwgdGV4dCkgLT5cclxuICBtc2dCbG9jayA9IGVsZW1lbnQuZmluZCgnLm1zZycpXHJcblxyXG4gIG1zZ0Jsb2NrLmZpbmQoJ3AnKS5odG1sKHRleHQpXHJcblxyXG4gIG1zZ0Jsb2NrLnNsaWRlRG93bigpXHJcblxyXG4gIHNldFRpbWVvdXQoKCkgLT5cclxuICAgIG1zZ0Jsb2NrLnNsaWRlVXAoKVxyXG4gICwgNzAwMClcclxuXHJcbiQgLT5cclxuICBtb2RhbEJsb2NrcyA9IHtcclxuICAgIGF1dGg6ICQoJy5qcy1hdXRoX21vZGFsX2Zvcm0nKVxyXG4gICAgZm9yZ290OiAkKCcuanMtZm9yZ290X3Bhc3N3b3JkX21vZGFsX2Zvcm0nKVxyXG4gIH1cclxuXHJcbiAgbW9kYWxCbG9ja3MuYXV0aC5maW5kKCcuanMtZm9yZ290X3Bhc3N3b3JkJykub24gJ2NsaWNrJywgKGUpIC0+XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICBzaG93TW9kYWxCbG9jayhtb2RhbEJsb2Nrcy5mb3Jnb3QpXHJcblxyXG4gICMg0J/RgNC+0LLQtdGA0Y/QtdC8INGC0LXQutGD0YnQuNC5INGF0LXRiCDQtNC70Y8g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQvNC+0LTQsNC70LrQuCwg0LXRgdC70Lgg0YfRgtC+XHJcbiAgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoXHJcblxyXG4gIGlmIGhhc2ggaXMgJyNhdXRob3JpemUnXHJcbiAgICBzaG93TW9kYWxCbG9jayhtb2RhbEJsb2Nrcy5hdXRoKVxyXG5cclxuICAjINCR0LjQvdC00LjQvCDQvtGC0LrRgNGL0YLQuNC1INC80L7QtNCw0LvQutC4INC/0L4g0LrQu9C40LrRgyDQvdCwINGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGJ0YPRjiDRgdGB0YvQu9C60YNcclxuICAjINC40LvQuCwg0LXRgdC70Lgg0Y3RgtC+INC80L7QsdC40LvRjNC90LDRjyDQstC10YDRgdC40Y8sINC+0YLQv9GA0LDQstC70Y/QtdC80YHRjyDQv9C+INGA0LXQsNC70YzQvdC+0Lkg0YHRgdGL0LvQutC1XHJcbiAgJCgnLmpzLWF1dGhfbGluaycpLm9uICdjbGljaycsIChlKSAtPlxyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcblxyXG4gICAgaWYgRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmN1cnJlbnQgaXNudCAnc21hbGwnXHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyNhdXRob3JpemUnXHJcblxyXG4gICAgICBzaG93TW9kYWxCbG9jayhtb2RhbEJsb2Nrcy5hdXRoKVxyXG4gICAgZWxzZVxyXG4gICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSgkKHRoaXMpLmF0dHIoJ2hyZWYnKSlcclxuXHJcbiAgIyDQo9Cx0LjRgNCw0L3QuNC1IGxhYmVsJ9C+0LIg0L/QtdGA0LXQtCDQv9C+0LvRj9C80Lgg0LLQstC+0LTQsFxyXG4gIGNoZWNrRm9ybUZpZWxkcyA9IChmaWVsZCkgLT5cclxuICAgIGxhYmVsID0gZmllbGQucHJldignbGFiZWwnKVxyXG5cclxuICAgIGlmIGZpZWxkLnZhbCgpXHJcbiAgICAgIGxhYmVsLmhpZGUoKSBpZiBsYWJlbC5pcygnOnZpc2libGUnKVxyXG4gICAgZWxzZSBpZiBsYWJlbC5ub3QoJzp2aXNpYmxlJylcclxuICAgICAgbGFiZWwuc2hvdygpXHJcblxyXG4gICQoJy5hdXRoX19mb3JtIGlucHV0Jykub24gJ2tleXVwIGNoYW5nZScsICgpIC0+XHJcbiAgICBjaGVja0Zvcm1GaWVsZHMoJCh0aGlzKSlcclxuXHJcbiAgJCh3aW5kb3cpLm9uICdsb2FkJywgKCkgLT5cclxuICAgICQuZWFjaCgkKCcuYXV0aF9fZm9ybSBpbnB1dCcpLCAoa2V5LCBmaWVsZCkgLT5cclxuICAgICAgc2V0VGltZW91dCgoKSAtPlxyXG4gICAgICAgIGNoZWNrRm9ybUZpZWxkcygkKGZpZWxkKSlcclxuICAgICAgLCAyMDApXHJcbiAgICApXHJcblxyXG4gIGFqYXhQYXRoID0gJy9hamF4L2F1dGgucGhwP2FjdGlvbj0nXHJcblxyXG4gIGZvcm1zID0gJCgnLmF1dGhfX2Zvcm0gZm9ybScpXHJcblxyXG4gICQuZWFjaChmb3JtcywgKGtleSwgZm9ybSkgLT5cclxuICAgIGZvcm0ubm9WYWxpZGF0ZSA9IHRydWVcclxuICApXHJcblxyXG4gIGZvcm1zLm9uICdzdWJtaXQnLCAoZSkgLT5cclxuICAgIGUucHJldmVudERlZmF1bHQoKVxyXG5cclxuICAgIGZvcm0gPSAkKHRoaXMpXHJcblxyXG4gICAgcHJlbG9hZGVyID0gJCh0aGlzKS5wYXJlbnQoKS5wcmVsb2FkZXIoKVxyXG5cclxuICAgIHByZWxvYWRlci5zaG93KClcclxuXHJcbiAgICBmb3JtVHlwZSA9ICQodGhpcykuZGF0YSgnZm9ybS10eXBlJylcclxuICAgICQuZ2V0SlNPTihhamF4UGF0aCArIGZvcm1UeXBlLCAkKHRoaXMpLnNlcmlhbGl6ZUFycmF5KCksIChyZXN1bHQpIC0+XHJcbiAgICAgIHByZWxvYWRlci5oaWRlKClcclxuXHJcbiAgICAgIGlmIHJlc3VsdFxyXG4gICAgICAgIGlmIHJlc3VsdC5zdGF0dXMgaXMgJ1knXHJcbiAgICAgICAgICBpZiByZXN1bHQuYWRkaXRpb25hbCBhbmQgcmVzdWx0LmFkZGl0aW9uYWwuaGFzT3duUHJvcGVydHkoJ2hlYWRlcl9tZW51JylcclxuICAgICAgICAgICAgbWVudUVsZW1lbnQgPSAkKCcuanMtYWpheF9wdWJsaWNfbWVudScpXHJcbiAgICAgICAgICAgIGJhbm5lckVsZW1lbnQgPSAkKCcuanMtYWpheF9iYW5uZXJfbWVudScpXHJcblxyXG4gICAgICAgICAgICBpZiBtZW51RWxlbWVudCBhbmQgbWVudUVsZW1lbnQubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICAgIG1lbnVFbGVtZW50Lmh0bWwocmVzdWx0LmFkZGl0aW9uYWwuaGVhZGVyX21lbnUpXHJcblxyXG4gICAgICAgICAgICBpZiBiYW5uZXJFbGVtZW50IGFuZCBiYW5uZXJFbGVtZW50Lmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICBiYW5uZXJFbGVtZW50Lmh0bWwocmVzdWx0LmFkZGl0aW9uYWwuYmFubmVyX21lbnUpXHJcblxyXG4gICAgICAgICAgZm9ybVswXS5yZXNldCgpXHJcblxyXG4gICAgICAgICAgbW9kYWxCbG9ja3NbZm9ybVR5cGVdLm1vZGFsKCkuaGlkZSgpXHJcbiAgICAgICAgZWxzZSBpZiByZXN1bHQuZXJyb3JzXHJcbiAgICAgICAgICBjdXN0b21FcnJvcnMgPSBbXVxyXG4gICAgICAgICAgZm9yIGVycm9yQ29kZSwgZXJyb3Igb2YgcmVzdWx0LmVycm9yc1xyXG4gICAgICAgICAgICBpZiBlcnJvckNvZGUgPT0gJ0VNUFRZJ1xyXG4gICAgICAgICAgICAgIGZpZWxkID0gZm9ybS5maW5kKCdbbmFtZT1cIicgKyBlcnJvciArICdcIl0nKVxyXG5cclxuICAgICAgICAgICAgICBpZiBmaWVsZFxyXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0KGZpZWxkWzBdKVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgY3VzdG9tRXJyb3JzLnB1c2goZXJyb3IpXHJcblxyXG4gICAgICAgICAgaWYgY3VzdG9tRXJyb3JzIGFuZCBjdXN0b21FcnJvcnMubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICBzaG93TWVzc2FnZShmb3JtLnBhcmVudCgpLCBjdXN0b21FcnJvcnMuam9pbignPGJyLz4nKSlcclxuICAgIClcclxuIl19
